// Code generated by protoc-gen-go. DO NOT EDIT.
// source: life_cycle_mgmt.proto

/*
Package gnoi_life_cycle_mgmt is a generated protocol buffer package.

It is generated from these files:
	life_cycle_mgmt.proto

It has these top-level messages:
	DownloadAndInstallRequest
	DownloadAndInstallResponse
	GetUpgradeStatusRequest
	GetUpgradeStatusResponse
	CancelUpgradeRequest
	CancelUpgradeResponse
	ActivateRequest
	ActivateResponse
*/
package gnoi_life_cycle_mgmt

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/openconfig/gnoi/types"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DownloadAndInstallResponse_DiRespCode int32

const (
	DownloadAndInstallResponse_di_command_sent_ok DownloadAndInstallResponse_DiRespCode = 0
	DownloadAndInstallResponse_di_command_error   DownloadAndInstallResponse_DiRespCode = 1
)

var DownloadAndInstallResponse_DiRespCode_name = map[int32]string{
	0: "di_command_sent_ok",
	1: "di_command_error",
}
var DownloadAndInstallResponse_DiRespCode_value = map[string]int32{
	"di_command_sent_ok": 0,
	"di_command_error":   1,
}

func (x DownloadAndInstallResponse_DiRespCode) String() string {
	return proto.EnumName(DownloadAndInstallResponse_DiRespCode_name, int32(x))
}
func (DownloadAndInstallResponse_DiRespCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{1, 0}
}

type GetUpgradeStatusResponse_XferTaskState int32

const (
	GetUpgradeStatusResponse_xfer_idle                   GetUpgradeStatusResponse_XferTaskState = 0
	GetUpgradeStatusResponse_xfer_download               GetUpgradeStatusResponse_XferTaskState = 1
	GetUpgradeStatusResponse_xfer_download_failed        GetUpgradeStatusResponse_XferTaskState = 2
	GetUpgradeStatusResponse_xfer_file_validation        GetUpgradeStatusResponse_XferTaskState = 3
	GetUpgradeStatusResponse_xfer_file_validation_failed GetUpgradeStatusResponse_XferTaskState = 4
	GetUpgradeStatusResponse_xfer_file_extraction        GetUpgradeStatusResponse_XferTaskState = 5
	GetUpgradeStatusResponse_xfer_file_extraction_failed GetUpgradeStatusResponse_XferTaskState = 6
	GetUpgradeStatusResponse_xfer_transfer_failed        GetUpgradeStatusResponse_XferTaskState = 7
)

var GetUpgradeStatusResponse_XferTaskState_name = map[int32]string{
	0: "xfer_idle",
	1: "xfer_download",
	2: "xfer_download_failed",
	3: "xfer_file_validation",
	4: "xfer_file_validation_failed",
	5: "xfer_file_extraction",
	6: "xfer_file_extraction_failed",
	7: "xfer_transfer_failed",
}
var GetUpgradeStatusResponse_XferTaskState_value = map[string]int32{
	"xfer_idle":                   0,
	"xfer_download":               1,
	"xfer_download_failed":        2,
	"xfer_file_validation":        3,
	"xfer_file_validation_failed": 4,
	"xfer_file_extraction":        5,
	"xfer_file_extraction_failed": 6,
	"xfer_transfer_failed":        7,
}

func (x GetUpgradeStatusResponse_XferTaskState) String() string {
	return proto.EnumName(GetUpgradeStatusResponse_XferTaskState_name, int32(x))
}
func (GetUpgradeStatusResponse_XferTaskState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{3, 0}
}

type GetUpgradeStatusResponse_GlobalState int32

const (
	GetUpgradeStatusResponse_gs_idle     GetUpgradeStatusResponse_GlobalState = 0
	GetUpgradeStatusResponse_gs_download GetUpgradeStatusResponse_GlobalState = 1
	GetUpgradeStatusResponse_gs_install  GetUpgradeStatusResponse_GlobalState = 2
)

var GetUpgradeStatusResponse_GlobalState_name = map[int32]string{
	0: "gs_idle",
	1: "gs_download",
	2: "gs_install",
}
var GetUpgradeStatusResponse_GlobalState_value = map[string]int32{
	"gs_idle":     0,
	"gs_download": 1,
	"gs_install":  2,
}

func (x GetUpgradeStatusResponse_GlobalState) String() string {
	return proto.EnumName(GetUpgradeStatusResponse_GlobalState_name, int32(x))
}
func (GetUpgradeStatusResponse_GlobalState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{3, 1}
}

type GetUpgradeStatusResponse_InstallTaskState int32

const (
	GetUpgradeStatusResponse_install_idle            GetUpgradeStatusResponse_InstallTaskState = 0
	GetUpgradeStatusResponse_install_install         GetUpgradeStatusResponse_InstallTaskState = 1
	GetUpgradeStatusResponse_install_install_failed  GetUpgradeStatusResponse_InstallTaskState = 2
	GetUpgradeStatusResponse_install_set_boot        GetUpgradeStatusResponse_InstallTaskState = 3
	GetUpgradeStatusResponse_install_set_boot_failed GetUpgradeStatusResponse_InstallTaskState = 4
	GetUpgradeStatusResponse_install_reboot          GetUpgradeStatusResponse_InstallTaskState = 5
)

var GetUpgradeStatusResponse_InstallTaskState_name = map[int32]string{
	0: "install_idle",
	1: "install_install",
	2: "install_install_failed",
	3: "install_set_boot",
	4: "install_set_boot_failed",
	5: "install_reboot",
}
var GetUpgradeStatusResponse_InstallTaskState_value = map[string]int32{
	"install_idle":            0,
	"install_install":         1,
	"install_install_failed":  2,
	"install_set_boot":        3,
	"install_set_boot_failed": 4,
	"install_reboot":          5,
}

func (x GetUpgradeStatusResponse_InstallTaskState) String() string {
	return proto.EnumName(GetUpgradeStatusResponse_InstallTaskState_name, int32(x))
}
func (GetUpgradeStatusResponse_InstallTaskState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{3, 2}
}

type CancelUpgradeResponse_CancelRespCode int32

const (
	CancelUpgradeResponse_cancel_ok    CancelUpgradeResponse_CancelRespCode = 0
	CancelUpgradeResponse_cancel_error CancelUpgradeResponse_CancelRespCode = 1
)

var CancelUpgradeResponse_CancelRespCode_name = map[int32]string{
	0: "cancel_ok",
	1: "cancel_error",
}
var CancelUpgradeResponse_CancelRespCode_value = map[string]int32{
	"cancel_ok":    0,
	"cancel_error": 1,
}

func (x CancelUpgradeResponse_CancelRespCode) String() string {
	return proto.EnumName(CancelUpgradeResponse_CancelRespCode_name, int32(x))
}
func (CancelUpgradeResponse_CancelRespCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{5, 0}
}

type ActivateResponse_ActivateRespCode int32

const (
	ActivateResponse_activate_ok    ActivateResponse_ActivateRespCode = 0
	ActivateResponse_activate_error ActivateResponse_ActivateRespCode = 1
)

var ActivateResponse_ActivateRespCode_name = map[int32]string{
	0: "activate_ok",
	1: "activate_error",
}
var ActivateResponse_ActivateRespCode_value = map[string]int32{
	"activate_ok":    0,
	"activate_error": 1,
}

func (x ActivateResponse_ActivateRespCode) String() string {
	return proto.EnumName(ActivateResponse_ActivateRespCode_name, int32(x))
}
func (ActivateResponse_ActivateRespCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{7, 0}
}

type DownloadAndInstallRequest struct {
	ImageUrl string `protobuf:"bytes,1,opt,name=image_url,json=imageUrl" json:"image_url,omitempty"`
}

func (m *DownloadAndInstallRequest) Reset()                    { *m = DownloadAndInstallRequest{} }
func (m *DownloadAndInstallRequest) String() string            { return proto.CompactTextString(m) }
func (*DownloadAndInstallRequest) ProtoMessage()               {}
func (*DownloadAndInstallRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DownloadAndInstallRequest) GetImageUrl() string {
	if m != nil {
		return m.ImageUrl
	}
	return ""
}

type DownloadAndInstallResponse struct {
	ResponseCode   DownloadAndInstallResponse_DiRespCode `protobuf:"varint,1,opt,name=response_code,json=responseCode,enum=gnoi.life_cycle_mgmt.DownloadAndInstallResponse_DiRespCode" json:"response_code,omitempty"`
	ResponseReason string                                `protobuf:"bytes,2,opt,name=response_reason,json=responseReason" json:"response_reason,omitempty"`
}

func (m *DownloadAndInstallResponse) Reset()                    { *m = DownloadAndInstallResponse{} }
func (m *DownloadAndInstallResponse) String() string            { return proto.CompactTextString(m) }
func (*DownloadAndInstallResponse) ProtoMessage()               {}
func (*DownloadAndInstallResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DownloadAndInstallResponse) GetResponseCode() DownloadAndInstallResponse_DiRespCode {
	if m != nil {
		return m.ResponseCode
	}
	return DownloadAndInstallResponse_di_command_sent_ok
}

func (m *DownloadAndInstallResponse) GetResponseReason() string {
	if m != nil {
		return m.ResponseReason
	}
	return ""
}

type GetUpgradeStatusRequest struct {
}

func (m *GetUpgradeStatusRequest) Reset()                    { *m = GetUpgradeStatusRequest{} }
func (m *GetUpgradeStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*GetUpgradeStatusRequest) ProtoMessage()               {}
func (*GetUpgradeStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type GetUpgradeStatusResponse struct {
	FileProgress           uint32                                    `protobuf:"varint,1,opt,name=file_progress,json=fileProgress" json:"file_progress,omitempty"`
	FileSize               uint64                                    `protobuf:"varint,2,opt,name=file_size,json=fileSize" json:"file_size,omitempty"`
	FileTransferBytes      uint64                                    `protobuf:"varint,3,opt,name=file_transfer_bytes,json=fileTransferBytes" json:"file_transfer_bytes,omitempty"`
	FileTransferRate       uint32                                    `protobuf:"varint,4,opt,name=file_transfer_rate,json=fileTransferRate" json:"file_transfer_rate,omitempty"`
	XferTaskEndTime        uint64                                    `protobuf:"varint,5,opt,name=xfer_task_end_time,json=xferTaskEndTime" json:"xfer_task_end_time,omitempty"`
	XferTaskStartTime      uint64                                    `protobuf:"varint,6,opt,name=xfer_task_start_time,json=xferTaskStartTime" json:"xfer_task_start_time,omitempty"`
	XferTaskState          GetUpgradeStatusResponse_XferTaskState    `protobuf:"varint,7,opt,name=xfer_task_state,json=xferTaskState,enum=gnoi.life_cycle_mgmt.GetUpgradeStatusResponse_XferTaskState" json:"xfer_task_state,omitempty"`
	XferTaskStateDetail    string                                    `protobuf:"bytes,8,opt,name=xfer_task_state_detail,json=xferTaskStateDetail" json:"xfer_task_state_detail,omitempty"`
	GlobalState            GetUpgradeStatusResponse_GlobalState      `protobuf:"varint,9,opt,name=global_state,json=globalState,enum=gnoi.life_cycle_mgmt.GetUpgradeStatusResponse_GlobalState" json:"global_state,omitempty"`
	InstallTaskEndTime     uint64                                    `protobuf:"varint,10,opt,name=install_task_end_time,json=installTaskEndTime" json:"install_task_end_time,omitempty"`
	InstallTaskStartTime   uint64                                    `protobuf:"varint,11,opt,name=install_task_start_time,json=installTaskStartTime" json:"install_task_start_time,omitempty"`
	InstallTaskState       GetUpgradeStatusResponse_InstallTaskState `protobuf:"varint,12,opt,name=install_task_state,json=installTaskState,enum=gnoi.life_cycle_mgmt.GetUpgradeStatusResponse_InstallTaskState" json:"install_task_state,omitempty"`
	InstallTaskStateDetail string                                    `protobuf:"bytes,13,opt,name=install_task_state_detail,json=installTaskStateDetail" json:"install_task_state_detail,omitempty"`
}

func (m *GetUpgradeStatusResponse) Reset()                    { *m = GetUpgradeStatusResponse{} }
func (m *GetUpgradeStatusResponse) String() string            { return proto.CompactTextString(m) }
func (*GetUpgradeStatusResponse) ProtoMessage()               {}
func (*GetUpgradeStatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetUpgradeStatusResponse) GetFileProgress() uint32 {
	if m != nil {
		return m.FileProgress
	}
	return 0
}

func (m *GetUpgradeStatusResponse) GetFileSize() uint64 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

func (m *GetUpgradeStatusResponse) GetFileTransferBytes() uint64 {
	if m != nil {
		return m.FileTransferBytes
	}
	return 0
}

func (m *GetUpgradeStatusResponse) GetFileTransferRate() uint32 {
	if m != nil {
		return m.FileTransferRate
	}
	return 0
}

func (m *GetUpgradeStatusResponse) GetXferTaskEndTime() uint64 {
	if m != nil {
		return m.XferTaskEndTime
	}
	return 0
}

func (m *GetUpgradeStatusResponse) GetXferTaskStartTime() uint64 {
	if m != nil {
		return m.XferTaskStartTime
	}
	return 0
}

func (m *GetUpgradeStatusResponse) GetXferTaskState() GetUpgradeStatusResponse_XferTaskState {
	if m != nil {
		return m.XferTaskState
	}
	return GetUpgradeStatusResponse_xfer_idle
}

func (m *GetUpgradeStatusResponse) GetXferTaskStateDetail() string {
	if m != nil {
		return m.XferTaskStateDetail
	}
	return ""
}

func (m *GetUpgradeStatusResponse) GetGlobalState() GetUpgradeStatusResponse_GlobalState {
	if m != nil {
		return m.GlobalState
	}
	return GetUpgradeStatusResponse_gs_idle
}

func (m *GetUpgradeStatusResponse) GetInstallTaskEndTime() uint64 {
	if m != nil {
		return m.InstallTaskEndTime
	}
	return 0
}

func (m *GetUpgradeStatusResponse) GetInstallTaskStartTime() uint64 {
	if m != nil {
		return m.InstallTaskStartTime
	}
	return 0
}

func (m *GetUpgradeStatusResponse) GetInstallTaskState() GetUpgradeStatusResponse_InstallTaskState {
	if m != nil {
		return m.InstallTaskState
	}
	return GetUpgradeStatusResponse_install_idle
}

func (m *GetUpgradeStatusResponse) GetInstallTaskStateDetail() string {
	if m != nil {
		return m.InstallTaskStateDetail
	}
	return ""
}

type CancelUpgradeRequest struct {
}

func (m *CancelUpgradeRequest) Reset()                    { *m = CancelUpgradeRequest{} }
func (m *CancelUpgradeRequest) String() string            { return proto.CompactTextString(m) }
func (*CancelUpgradeRequest) ProtoMessage()               {}
func (*CancelUpgradeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type CancelUpgradeResponse struct {
	ResponseCode   CancelUpgradeResponse_CancelRespCode `protobuf:"varint,1,opt,name=response_code,json=responseCode,enum=gnoi.life_cycle_mgmt.CancelUpgradeResponse_CancelRespCode" json:"response_code,omitempty"`
	ResponseReason string                               `protobuf:"bytes,2,opt,name=response_reason,json=responseReason" json:"response_reason,omitempty"`
}

func (m *CancelUpgradeResponse) Reset()                    { *m = CancelUpgradeResponse{} }
func (m *CancelUpgradeResponse) String() string            { return proto.CompactTextString(m) }
func (*CancelUpgradeResponse) ProtoMessage()               {}
func (*CancelUpgradeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CancelUpgradeResponse) GetResponseCode() CancelUpgradeResponse_CancelRespCode {
	if m != nil {
		return m.ResponseCode
	}
	return CancelUpgradeResponse_cancel_ok
}

func (m *CancelUpgradeResponse) GetResponseReason() string {
	if m != nil {
		return m.ResponseReason
	}
	return ""
}

type ActivateRequest struct {
}

func (m *ActivateRequest) Reset()                    { *m = ActivateRequest{} }
func (m *ActivateRequest) String() string            { return proto.CompactTextString(m) }
func (*ActivateRequest) ProtoMessage()               {}
func (*ActivateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type ActivateResponse struct {
	ResponseCode   ActivateResponse_ActivateRespCode `protobuf:"varint,1,opt,name=response_code,json=responseCode,enum=gnoi.life_cycle_mgmt.ActivateResponse_ActivateRespCode" json:"response_code,omitempty"`
	ResponseReason string                            `protobuf:"bytes,2,opt,name=response_reason,json=responseReason" json:"response_reason,omitempty"`
}

func (m *ActivateResponse) Reset()                    { *m = ActivateResponse{} }
func (m *ActivateResponse) String() string            { return proto.CompactTextString(m) }
func (*ActivateResponse) ProtoMessage()               {}
func (*ActivateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ActivateResponse) GetResponseCode() ActivateResponse_ActivateRespCode {
	if m != nil {
		return m.ResponseCode
	}
	return ActivateResponse_activate_ok
}

func (m *ActivateResponse) GetResponseReason() string {
	if m != nil {
		return m.ResponseReason
	}
	return ""
}

func init() {
	proto.RegisterType((*DownloadAndInstallRequest)(nil), "gnoi.life_cycle_mgmt.DownloadAndInstallRequest")
	proto.RegisterType((*DownloadAndInstallResponse)(nil), "gnoi.life_cycle_mgmt.DownloadAndInstallResponse")
	proto.RegisterType((*GetUpgradeStatusRequest)(nil), "gnoi.life_cycle_mgmt.GetUpgradeStatusRequest")
	proto.RegisterType((*GetUpgradeStatusResponse)(nil), "gnoi.life_cycle_mgmt.GetUpgradeStatusResponse")
	proto.RegisterType((*CancelUpgradeRequest)(nil), "gnoi.life_cycle_mgmt.CancelUpgradeRequest")
	proto.RegisterType((*CancelUpgradeResponse)(nil), "gnoi.life_cycle_mgmt.CancelUpgradeResponse")
	proto.RegisterType((*ActivateRequest)(nil), "gnoi.life_cycle_mgmt.ActivateRequest")
	proto.RegisterType((*ActivateResponse)(nil), "gnoi.life_cycle_mgmt.ActivateResponse")
	proto.RegisterEnum("gnoi.life_cycle_mgmt.DownloadAndInstallResponse_DiRespCode", DownloadAndInstallResponse_DiRespCode_name, DownloadAndInstallResponse_DiRespCode_value)
	proto.RegisterEnum("gnoi.life_cycle_mgmt.GetUpgradeStatusResponse_XferTaskState", GetUpgradeStatusResponse_XferTaskState_name, GetUpgradeStatusResponse_XferTaskState_value)
	proto.RegisterEnum("gnoi.life_cycle_mgmt.GetUpgradeStatusResponse_GlobalState", GetUpgradeStatusResponse_GlobalState_name, GetUpgradeStatusResponse_GlobalState_value)
	proto.RegisterEnum("gnoi.life_cycle_mgmt.GetUpgradeStatusResponse_InstallTaskState", GetUpgradeStatusResponse_InstallTaskState_name, GetUpgradeStatusResponse_InstallTaskState_value)
	proto.RegisterEnum("gnoi.life_cycle_mgmt.CancelUpgradeResponse_CancelRespCode", CancelUpgradeResponse_CancelRespCode_name, CancelUpgradeResponse_CancelRespCode_value)
	proto.RegisterEnum("gnoi.life_cycle_mgmt.ActivateResponse_ActivateRespCode", ActivateResponse_ActivateRespCode_name, ActivateResponse_ActivateRespCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for LifeCycleMgmt service

type LifeCycleMgmtClient interface {
	// DownloadAndInstall downloads the image specified in the image-url specified in
	// the DownloadAndInstallRequest. The supported image-url path could a remote FTP server,
	// remote HTTP or HTTPS server or remote TFTP file system. Then, it installs the image onto the switch.
	//
	DownloadAndInstall(ctx context.Context, in *DownloadAndInstallRequest, opts ...grpc.CallOption) (*DownloadAndInstallResponse, error)
	GetUpgradeStatus(ctx context.Context, in *GetUpgradeStatusRequest, opts ...grpc.CallOption) (*GetUpgradeStatusResponse, error)
	// CancelUpgrade cancels an active file download in progress. During the course of the image file transfer,
	// CancelUpgrade will abort the image file transfer and the upgrade operation will terminate.
	// By the time CancelUpgrade is issued, if image file transfer is 100% complete and the image installation
	// is in progress, CancelUpgrade will not work. Also, CancelUpgrade  will not work once Activate is issued.
	CancelUpgrade(ctx context.Context, in *CancelUpgradeRequest, opts ...grpc.CallOption) (*CancelUpgradeResponse, error)
	// Activate is a a two step process. In the first step, the boot partition is set to standby for subsequent boot.
	// In the second step, a system reload is issued to boot the newly installed OS10 image from standby partition.
	// Activate image requires a system reload and hence is service affecting.
	Activate(ctx context.Context, in *ActivateRequest, opts ...grpc.CallOption) (*ActivateResponse, error)
}

type lifeCycleMgmtClient struct {
	cc *grpc.ClientConn
}

func NewLifeCycleMgmtClient(cc *grpc.ClientConn) LifeCycleMgmtClient {
	return &lifeCycleMgmtClient{cc}
}

func (c *lifeCycleMgmtClient) DownloadAndInstall(ctx context.Context, in *DownloadAndInstallRequest, opts ...grpc.CallOption) (*DownloadAndInstallResponse, error) {
	out := new(DownloadAndInstallResponse)
	err := grpc.Invoke(ctx, "/gnoi.life_cycle_mgmt.life_cycle_mgmt/DownloadAndInstall", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lifeCycleMgmtClient) GetUpgradeStatus(ctx context.Context, in *GetUpgradeStatusRequest, opts ...grpc.CallOption) (*GetUpgradeStatusResponse, error) {
	out := new(GetUpgradeStatusResponse)
	err := grpc.Invoke(ctx, "/gnoi.life_cycle_mgmt.life_cycle_mgmt/GetUpgradeStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lifeCycleMgmtClient) CancelUpgrade(ctx context.Context, in *CancelUpgradeRequest, opts ...grpc.CallOption) (*CancelUpgradeResponse, error) {
	out := new(CancelUpgradeResponse)
	err := grpc.Invoke(ctx, "/gnoi.life_cycle_mgmt.life_cycle_mgmt/CancelUpgrade", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lifeCycleMgmtClient) Activate(ctx context.Context, in *ActivateRequest, opts ...grpc.CallOption) (*ActivateResponse, error) {
	out := new(ActivateResponse)
	err := grpc.Invoke(ctx, "/gnoi.life_cycle_mgmt.life_cycle_mgmt/Activate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LifeCycleMgmt service

type LifeCycleMgmtServer interface {
	// DownloadAndInstall downloads the image specified in the image-url specified in
	// the DownloadAndInstallRequest. The supported image-url path could a remote FTP server,
	// remote HTTP or HTTPS server or remote TFTP file system. Then, it installs the image onto the switch.
	//
	DownloadAndInstall(context.Context, *DownloadAndInstallRequest) (*DownloadAndInstallResponse, error)
	GetUpgradeStatus(context.Context, *GetUpgradeStatusRequest) (*GetUpgradeStatusResponse, error)
	// CancelUpgrade cancels an active file download in progress. During the course of the image file transfer,
	// CancelUpgrade will abort the image file transfer and the upgrade operation will terminate.
	// By the time CancelUpgrade is issued, if image file transfer is 100% complete and the image installation
	// is in progress, CancelUpgrade will not work. Also, CancelUpgrade  will not work once Activate is issued.
	CancelUpgrade(context.Context, *CancelUpgradeRequest) (*CancelUpgradeResponse, error)
	// Activate is a a two step process. In the first step, the boot partition is set to standby for subsequent boot.
	// In the second step, a system reload is issued to boot the newly installed OS10 image from standby partition.
	// Activate image requires a system reload and hence is service affecting.
	Activate(context.Context, *ActivateRequest) (*ActivateResponse, error)
}

func RegisterLifeCycleMgmtServer(s *grpc.Server, srv LifeCycleMgmtServer) {
	s.RegisterService(&_LifeCycleMgmt_serviceDesc, srv)
}

func _LifeCycleMgmt_DownloadAndInstall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadAndInstallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LifeCycleMgmtServer).DownloadAndInstall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gnoi.life_cycle_mgmt.life_cycle_mgmt/DownloadAndInstall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LifeCycleMgmtServer).DownloadAndInstall(ctx, req.(*DownloadAndInstallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LifeCycleMgmt_GetUpgradeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUpgradeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LifeCycleMgmtServer).GetUpgradeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gnoi.life_cycle_mgmt.life_cycle_mgmt/GetUpgradeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LifeCycleMgmtServer).GetUpgradeStatus(ctx, req.(*GetUpgradeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LifeCycleMgmt_CancelUpgrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelUpgradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LifeCycleMgmtServer).CancelUpgrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gnoi.life_cycle_mgmt.life_cycle_mgmt/CancelUpgrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LifeCycleMgmtServer).CancelUpgrade(ctx, req.(*CancelUpgradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LifeCycleMgmt_Activate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LifeCycleMgmtServer).Activate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gnoi.life_cycle_mgmt.life_cycle_mgmt/Activate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LifeCycleMgmtServer).Activate(ctx, req.(*ActivateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LifeCycleMgmt_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gnoi.life_cycle_mgmt.life_cycle_mgmt",
	HandlerType: (*LifeCycleMgmtServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DownloadAndInstall",
			Handler:    _LifeCycleMgmt_DownloadAndInstall_Handler,
		},
		{
			MethodName: "GetUpgradeStatus",
			Handler:    _LifeCycleMgmt_GetUpgradeStatus_Handler,
		},
		{
			MethodName: "CancelUpgrade",
			Handler:    _LifeCycleMgmt_CancelUpgrade_Handler,
		},
		{
			MethodName: "Activate",
			Handler:    _LifeCycleMgmt_Activate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "life_cycle_mgmt.proto",
}

func init() { proto.RegisterFile("life_cycle_mgmt.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 919 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0x4d, 0x6f, 0xdb, 0x46,
	0x10, 0x15, 0xfd, 0xad, 0xb1, 0x3e, 0xe8, 0xb1, 0xac, 0xd0, 0xf6, 0xa1, 0x05, 0x8b, 0x7e, 0xa0,
	0x49, 0x29, 0x27, 0x46, 0x81, 0x1a, 0x4d, 0x03, 0x38, 0x71, 0x11, 0xe4, 0x56, 0xd0, 0x0e, 0x50,
	0xa0, 0x40, 0x88, 0x15, 0x39, 0x62, 0xb7, 0xa6, 0xb8, 0x2a, 0x77, 0x9d, 0xc6, 0xf9, 0x31, 0xfd,
	0x41, 0x3d, 0xf6, 0x50, 0xf4, 0xd2, 0x73, 0x81, 0xfe, 0x8a, 0x82, 0xcb, 0xa5, 0x44, 0x51, 0x0a,
	0x62, 0x21, 0x17, 0xc3, 0x9e, 0x37, 0x6f, 0x76, 0xe6, 0xed, 0xe3, 0xac, 0xe1, 0x20, 0xe1, 0x23,
	0x0a, 0xc2, 0xdb, 0x30, 0xa1, 0x60, 0x1c, 0x8f, 0x95, 0x37, 0xc9, 0x84, 0x12, 0xd8, 0x8b, 0x53,
	0xc1, 0xbd, 0x1a, 0x76, 0xf4, 0x20, 0xe6, 0xea, 0xe7, 0x9b, 0xa1, 0x17, 0x8a, 0xf1, 0x40, 0x4c,
	0x28, 0x0d, 0x45, 0x3a, 0xe2, 0xf1, 0x20, 0xcf, 0x1d, 0xa8, 0xdb, 0x09, 0xc9, 0xe2, 0x67, 0x51,
	0xc3, 0xfd, 0x06, 0x0e, 0x2f, 0xc4, 0x6f, 0x69, 0x22, 0x58, 0x74, 0x9e, 0x46, 0x2f, 0x52, 0xa9,
	0x58, 0x92, 0xf8, 0xf4, 0xeb, 0x0d, 0x49, 0x85, 0xc7, 0xd0, 0xe4, 0x63, 0x16, 0x53, 0x70, 0x93,
	0x25, 0x8e, 0xf5, 0xb1, 0xf5, 0x45, 0xd3, 0xdf, 0xd1, 0x81, 0x97, 0x59, 0xe2, 0xfe, 0x6b, 0xc1,
	0xd1, 0x32, 0xaa, 0x9c, 0x88, 0x54, 0x12, 0x0e, 0xa1, 0x9d, 0x99, 0xdf, 0x83, 0x50, 0x44, 0xa4,
	0xf9, 0x9d, 0x47, 0xdf, 0x79, 0xcb, 0x9a, 0xf6, 0xde, 0x5d, 0xc8, 0xbb, 0xe0, 0x41, 0x5e, 0x48,
	0x17, 0xf1, 0x5b, 0x65, 0xcd, 0x67, 0x22, 0x22, 0xfc, 0x1c, 0xba, 0xd3, 0x33, 0x32, 0x62, 0x52,
	0xa4, 0xce, 0x9a, 0xee, 0xb2, 0x53, 0x86, 0x7d, 0x1d, 0x75, 0x1f, 0x43, 0xab, 0x5a, 0x06, 0xfb,
	0x80, 0x11, 0x0f, 0x42, 0x31, 0x1e, 0xb3, 0x34, 0x0a, 0x24, 0xa5, 0x2a, 0x10, 0xd7, 0x76, 0x03,
	0x7b, 0x60, 0x57, 0xe2, 0x94, 0x65, 0x22, 0xb3, 0x2d, 0xf7, 0x10, 0xee, 0x3d, 0x27, 0xf5, 0x72,
	0x12, 0x67, 0x2c, 0xa2, 0x4b, 0xc5, 0xd4, 0x8d, 0x34, 0x0a, 0xb9, 0xff, 0x35, 0xc1, 0x59, 0xc4,
	0x8c, 0x04, 0x9f, 0x40, 0x7b, 0xc4, 0x13, 0x0a, 0x26, 0x99, 0x88, 0x33, 0x92, 0x52, 0x4b, 0xd0,
	0xf6, 0x5b, 0x79, 0xf0, 0x07, 0x13, 0xcb, 0x35, 0xd6, 0x49, 0x92, 0xbf, 0x25, 0xdd, 0xfd, 0x86,
	0xbf, 0x93, 0x07, 0x2e, 0xf9, 0x5b, 0x42, 0x0f, 0xf6, 0x35, 0xa8, 0x32, 0x96, 0xca, 0x11, 0x65,
	0xc1, 0xf0, 0x56, 0x91, 0x74, 0xd6, 0x75, 0xda, 0x5e, 0x0e, 0x5d, 0x19, 0xe4, 0x69, 0x0e, 0xe0,
	0x03, 0xc0, 0xf9, 0xfc, 0x8c, 0x29, 0x72, 0x36, 0xf4, 0xb1, 0x76, 0x35, 0xdd, 0x67, 0x8a, 0xf0,
	0x3e, 0xe0, 0x9b, 0x3c, 0x49, 0x31, 0x79, 0x1d, 0x50, 0x1a, 0x05, 0x8a, 0x8f, 0xc9, 0xd9, 0xd4,
	0xc5, 0xbb, 0x39, 0x72, 0xc5, 0xe4, 0xf5, 0xf7, 0x69, 0x74, 0xc5, 0xc7, 0x84, 0x03, 0xe8, 0xcd,
	0x92, 0xa5, 0x62, 0x99, 0x2a, 0xd2, 0xb7, 0x8a, 0x5e, 0xca, 0xf4, 0xcb, 0x1c, 0xd1, 0x84, 0x11,
	0x74, 0xe7, 0x08, 0x8a, 0x9c, 0x6d, 0x6d, 0x81, 0x27, 0xcb, 0x2d, 0xf0, 0x2e, 0x19, 0xbd, 0x1f,
	0xe7, 0xab, 0xf8, 0xed, 0xca, 0x59, 0x8a, 0xf0, 0x14, 0xfa, 0xb5, 0x73, 0x82, 0x88, 0x14, 0xe3,
	0x89, 0xb3, 0xa3, 0xbd, 0xb0, 0x3f, 0x97, 0x7e, 0xa1, 0x21, 0x7c, 0x05, 0xad, 0x38, 0x11, 0x43,
	0x96, 0x98, 0xce, 0x9a, 0xba, 0xb3, 0x6f, 0x57, 0xec, 0xec, 0x79, 0xa5, 0x84, 0xbf, 0x5b, 0x14,
	0x2c, 0x9a, 0x7a, 0x08, 0x07, 0xbc, 0xf0, 0x71, 0x4d, 0x5d, 0xd0, 0x72, 0xa1, 0x01, 0xab, 0x02,
	0x7f, 0x0d, 0xf7, 0xe6, 0x28, 0x15, 0x8d, 0x77, 0x35, 0xa9, 0x57, 0x21, 0xcd, 0x64, 0x16, 0x80,
	0x75, 0x9a, 0x22, 0xa7, 0xa5, 0xe7, 0x39, 0x5f, 0x71, 0x9e, 0x17, 0x0b, 0x85, 0x7c, 0x7b, 0xfe,
	0x50, 0x45, 0x78, 0x06, 0x87, 0x8b, 0x07, 0x96, 0x92, 0xb7, 0xb5, 0xe4, 0xfd, 0x3a, 0xa9, 0x50,
	0xdd, 0xfd, 0xc7, 0x82, 0x6e, 0xed, 0x36, 0xb1, 0x0d, 0x4d, 0x7d, 0x7d, 0x3c, 0x4a, 0xc8, 0x6e,
	0xe0, 0x1e, 0xe8, 0xeb, 0x0d, 0x22, 0xb3, 0x10, 0x6c, 0x0b, 0x1d, 0xe3, 0xbc, 0x32, 0x14, 0x8c,
	0x18, 0x4f, 0x28, 0xb2, 0xd7, 0xa6, 0x88, 0xf6, 0xfc, 0x6b, 0x96, 0xf0, 0x88, 0x29, 0x2e, 0x52,
	0x7b, 0x1d, 0x3f, 0x82, 0xe3, 0x65, 0x48, 0x49, 0xdd, 0x98, 0xa7, 0xd2, 0x1b, 0x95, 0xb1, 0x50,
	0x53, 0x37, 0xe7, 0xa9, 0x33, 0xa4, 0xa4, 0x6e, 0x4d, 0xa9, 0xd3, 0x8f, 0xcc, 0x20, 0xdb, 0xf9,
	0x9a, 0xa9, 0x5a, 0x02, 0x77, 0x61, 0x3b, 0x96, 0xe5, 0x64, 0x5d, 0xd8, 0x8d, 0x65, 0x75, 0xae,
	0x0e, 0x40, 0x8e, 0x16, 0x52, 0xd9, 0x6b, 0xee, 0xef, 0x16, 0xe0, 0xe2, 0x0d, 0xa0, 0x0d, 0xad,
	0x52, 0x6f, 0x53, 0x69, 0x1f, 0xba, 0xd3, 0x88, 0x61, 0x5b, 0x78, 0x04, 0xfd, 0x5a, 0x70, 0xa6,
	0x53, 0x0f, 0xca, 0x6b, 0x0c, 0x24, 0xa9, 0x60, 0x28, 0x84, 0xb2, 0xd7, 0xf1, 0x78, 0x66, 0xb8,
	0x32, 0x3a, 0xd3, 0x07, 0xa1, 0x53, 0x82, 0x19, 0x69, 0xc2, 0xa6, 0xdb, 0x87, 0xde, 0x33, 0x96,
	0x86, 0x94, 0x18, 0xf7, 0x94, 0x4b, 0xf0, 0x6f, 0x0b, 0x0e, 0x6a, 0x80, 0xd9, 0x80, 0x6c, 0xf9,
	0x23, 0xf0, 0x78, 0xb9, 0x2f, 0x97, 0xd6, 0x30, 0xd1, 0x0f, 0x7f, 0x03, 0x4e, 0xc1, 0xae, 0x97,
	0xca, 0xcd, 0x17, 0x16, 0x31, 0xbd, 0xfe, 0x6d, 0x68, 0x99, 0x3f, 0xcb, 0xd5, 0xbf, 0x07, 0xdd,
	0xf3, 0x50, 0xf1, 0xd7, 0xf9, 0xa7, 0x60, 0xa6, 0xfd, 0xcb, 0x02, 0x7b, 0x16, 0x33, 0x83, 0xbe,
	0x5a, 0x3e, 0xe8, 0xd9, 0xf2, 0x41, 0xeb, 0xf4, 0x69, 0xe0, 0xc3, 0xa7, 0x3c, 0x03, 0x5c, 0x2c,
	0x96, 0x7b, 0x8f, 0x95, 0x51, 0x3d, 0x29, 0x42, 0x67, 0x1a, 0x30, 0xb3, 0x3e, 0xfa, 0x63, 0x1d,
	0xba, 0xb5, 0x4e, 0xf1, 0x16, 0x70, 0xf1, 0x69, 0xc6, 0xc1, 0xdd, 0x1f, 0x71, 0xad, 0xd9, 0xd1,
	0xc9, 0xaa, 0xaf, 0xbe, 0xdb, 0x40, 0x09, 0x76, 0x7d, 0x51, 0xe1, 0x57, 0x77, 0x5d, 0x68, 0xc5,
	0xb1, 0xde, 0x6a, 0xfb, 0xcf, 0x6d, 0xe0, 0x2f, 0xd0, 0x9e, 0x73, 0x21, 0x7e, 0x79, 0x27, 0xab,
	0x16, 0xc7, 0xdd, 0x5f, 0xc1, 0xd6, 0x6e, 0x03, 0x7f, 0x82, 0x9d, 0xf2, 0xaa, 0xf0, 0xd3, 0xf7,
	0x19, 0xa5, 0x38, 0xe1, 0xb3, 0xbb, 0xf9, 0xc9, 0x6d, 0x3c, 0xdd, 0xf9, 0xf3, 0xc9, 0xe6, 0x89,
	0xf7, 0xd0, 0x3b, 0x19, 0x6e, 0xe9, 0x7f, 0xf4, 0x4e, 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x24,
	0xb0, 0xec, 0x17, 0x45, 0x0a, 0x00, 0x00,
}
