// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sonic_show_techsupport.proto

/*
Package gnoi_sonic is a generated protocol buffer package.

It is generated from these files:
	sonic_show_techsupport.proto

It has these top-level messages:
	TechsupportRequest
	TechsupportResponse
*/
package gnoi_sonic

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TechsupportRequest struct {
	Date string `protobuf:"bytes,1,opt,name=date" json:"date,omitempty"`
}

func (m *TechsupportRequest) Reset()                    { *m = TechsupportRequest{} }
func (m *TechsupportRequest) String() string            { return proto.CompactTextString(m) }
func (*TechsupportRequest) ProtoMessage()               {}
func (*TechsupportRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TechsupportRequest) GetDate() string {
	if m != nil {
		return m.Date
	}
	return ""
}

type TechsupportResponse struct {
	OutputFilename string `protobuf:"bytes,1,opt,name=output_filename,json=outputFilename" json:"output_filename,omitempty"`
}

func (m *TechsupportResponse) Reset()                    { *m = TechsupportResponse{} }
func (m *TechsupportResponse) String() string            { return proto.CompactTextString(m) }
func (*TechsupportResponse) ProtoMessage()               {}
func (*TechsupportResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TechsupportResponse) GetOutputFilename() string {
	if m != nil {
		return m.OutputFilename
	}
	return ""
}

func init() {
	proto.RegisterType((*TechsupportRequest)(nil), "gnoi.sonic.TechsupportRequest")
	proto.RegisterType((*TechsupportResponse)(nil), "gnoi.sonic.TechsupportResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SonicService service

type SonicServiceClient interface {
	ShowTechsupport(ctx context.Context, in *TechsupportRequest, opts ...grpc.CallOption) (*TechsupportResponse, error)
}

type sonicServiceClient struct {
	cc *grpc.ClientConn
}

func NewSonicServiceClient(cc *grpc.ClientConn) SonicServiceClient {
	return &sonicServiceClient{cc}
}

func (c *sonicServiceClient) ShowTechsupport(ctx context.Context, in *TechsupportRequest, opts ...grpc.CallOption) (*TechsupportResponse, error) {
	out := new(TechsupportResponse)
	err := grpc.Invoke(ctx, "/gnoi.sonic.SonicService/ShowTechsupport", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SonicService service

type SonicServiceServer interface {
	ShowTechsupport(context.Context, *TechsupportRequest) (*TechsupportResponse, error)
}

func RegisterSonicServiceServer(s *grpc.Server, srv SonicServiceServer) {
	s.RegisterService(&_SonicService_serviceDesc, srv)
}

func _SonicService_ShowTechsupport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TechsupportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SonicServiceServer).ShowTechsupport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gnoi.sonic.SonicService/ShowTechsupport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SonicServiceServer).ShowTechsupport(ctx, req.(*TechsupportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SonicService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gnoi.sonic.SonicService",
	HandlerType: (*SonicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShowTechsupport",
			Handler:    _SonicService_ShowTechsupport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sonic_show_techsupport.proto",
}

func init() { proto.RegisterFile("sonic_show_techsupport.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 178 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x29, 0xce, 0xcf, 0xcb,
	0x4c, 0x8e, 0x2f, 0xce, 0xc8, 0x2f, 0x8f, 0x2f, 0x49, 0x4d, 0xce, 0x28, 0x2e, 0x2d, 0x28, 0xc8,
	0x2f, 0x2a, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4a, 0xcf, 0xcb, 0xcf, 0xd4, 0x03,
	0x2b, 0x51, 0xd2, 0xe0, 0x12, 0x0a, 0x41, 0x28, 0x08, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11,
	0x12, 0xe2, 0x62, 0x49, 0x49, 0x2c, 0x49, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3,
	0x95, 0xec, 0xb8, 0x84, 0x51, 0x54, 0x16, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x0a, 0xa9, 0x73, 0xf1,
	0xe7, 0x97, 0x96, 0x14, 0x94, 0x96, 0xc4, 0xa7, 0x65, 0xe6, 0xa4, 0xe6, 0x25, 0xe6, 0xc2, 0x74,
	0xf1, 0x41, 0x84, 0xdd, 0xa0, 0xa2, 0x46, 0x29, 0x5c, 0x3c, 0xc1, 0x20, 0x2b, 0x83, 0x53, 0x8b,
	0xca, 0x32, 0x93, 0x53, 0x85, 0x42, 0xb8, 0xf8, 0x83, 0x33, 0xf2, 0xcb, 0x91, 0xcc, 0x14, 0x92,
	0xd3, 0x43, 0xb8, 0x4c, 0x0f, 0xd3, 0x59, 0x52, 0xf2, 0x38, 0xe5, 0x21, 0x8e, 0x51, 0x62, 0x48,
	0x62, 0x03, 0x7b, 0xd1, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x65, 0xca, 0xd1, 0x03, 0x02, 0x01,
	0x00, 0x00,
}
