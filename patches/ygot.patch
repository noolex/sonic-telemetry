diff -ruN ygot-dir-orig/ygot/util/debug.go ygot-dir/ygot/util/debug.go
--- ygot-dir-orig/ygot/util/debug.go	2019-10-24 12:30:06.378629000 -0700
+++ ygot-dir/ygot/util/debug.go	2019-10-24 12:31:25.059277000 -0700
@@ -12,6 +12,9 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
+// This file is changed by Broadcom.
+// Modifications - Copyright 2019 Broadcom. The term Broadcom refers to Broadcom Inc. and/or its subsidiaries.
+
 package util
 
 import (
@@ -53,6 +56,14 @@
 	fmt.Println(globalIndent + out)
 }
 
+func IsDebugLibraryEnabled () bool {
+	return debugLibrary
+}
+
+func IsDebugSchemaEnabled () bool {
+	return debugSchema
+}
+
 // DbgSchema prints v if the package global variable debugSchema is set.
 // v has the same format as Printf.
 func DbgSchema(v ...interface{}) {
@@ -177,6 +188,9 @@
 
 // YangTypeToDebugString returns a debug string representation of a YangType.
 func YangTypeToDebugString(yt *yang.YangType) string {
+	if !debugLibrary {
+		return ""
+	}
 	out := fmt.Sprintf("(TypeKind: %s", yang.TypeKindToName[yt.Kind])
 	if len(yt.Pattern) != 0 {
 		out += fmt.Sprintf(", Pattern: %s", strings.Join(yt.Pattern, " or "))
diff -ruN ygot-dir-orig/ygot/util/reflect.go ygot-dir/ygot/util/reflect.go
--- ygot-dir-orig/ygot/util/reflect.go	2019-10-24 12:30:06.403914000 -0700
+++ ygot-dir/ygot/util/reflect.go	2019-10-24 12:31:25.063424000 -0700
@@ -12,6 +12,9 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
+// This file is changed by Broadcom.
+// Modifications - Copyright 2019 Broadcom. The term Broadcom refers to Broadcom Inc. and/or its subsidiaries.
+
 package util
 
 import (
@@ -196,8 +199,10 @@
 
 // InsertIntoMap inserts value with key into parent which must be a map.
 func InsertIntoMap(parentMap interface{}, key interface{}, value interface{}) error {
-	DbgPrint("InsertIntoMap into parent type %T with key %v(%T) value \n%s\n (%T)",
-		parentMap, ValueStrDebug(key), key, pretty.Sprint(value), value)
+    if debugLibrary {
+	   DbgPrint("InsertIntoMap into parent type %T with key %v(%T) value \n%s\n (%T)",
+	      parentMap, ValueStrDebug(key), key, pretty.Sprint(value), value)
+    }
 
 	v := reflect.ValueOf(parentMap)
 	t := reflect.TypeOf(parentMap)
@@ -288,7 +293,7 @@
 		n = reflect.Zero(ft.Type)
 	}
 
-	if !isFieldTypeCompatible(ft, n) {
+	if !isFieldTypeCompatible(ft, n) && !IsValueTypeCompatible(ft.Type, v) {
 		return fmt.Errorf("cannot assign value %v (type %T) to struct field %s (type %v) in struct %T", fieldValue, fieldValue, fieldName, ft.Type, parentStruct)
 	}
 
diff -ruN ygot-dir-orig/ygot/util/schema.go ygot-dir/ygot/util/schema.go
--- ygot-dir-orig/ygot/util/schema.go	2019-10-24 12:30:06.417942000 -0700
+++ ygot-dir/ygot/util/schema.go	2019-10-24 12:31:25.069042000 -0700
@@ -12,6 +12,9 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
+// This file is changed by Broadcom.
+// Modifications - Copyright 2019 Broadcom. The term Broadcom refers to Broadcom Inc. and/or its subsidiaries.
+
 package util
 
 import (
@@ -22,6 +25,8 @@
 	"github.com/openconfig/goyang/pkg/yang"
 )
 
+var schemaPathCache map[reflect.StructTag][][]string = make(map[reflect.StructTag][][]string)
+
 // IsLeafRef reports whether schema is a leafref schema node type.
 func IsLeafRef(schema *yang.Entry) bool {
 	if schema == nil || schema.Type == nil {
@@ -68,17 +73,22 @@
 
 // SchemaPaths returns all the paths in the path tag.
 func SchemaPaths(f reflect.StructField) ([][]string, error) {
-	var out [][]string
-	pathTag, ok := f.Tag.Lookup("path")
-	if !ok || pathTag == "" {
-		return nil, fmt.Errorf("field %s did not specify a path", f.Name)
-	}
-
-	ps := strings.Split(pathTag, "|")
-	for _, p := range ps {
-		out = append(out, StripModulePrefixes(strings.Split(p, "/")))
+	if tmpOut, ok := schemaPathCache[f.Tag]; ok {
+		return tmpOut, nil
+	} else {
+		var out [][]string
+		pathTag, ok := f.Tag.Lookup("path")
+		if !ok || pathTag == "" {
+			return nil, fmt.Errorf("field %s did not specify a path", f.Name)
+		}
+	
+		ps := strings.Split(pathTag, "|")
+		for _, p := range ps {
+			out = append(out, StripModulePrefixes(strings.Split(p, "/")))
+		}
+		schemaPathCache[f.Tag] = out
+		return out, nil
 	}
-	return out, nil
 }
 
 // ChildSchema returns the first child schema that matches path from the given
@@ -233,7 +243,9 @@
 	found := true
 	DbgSchema("traversing schema Dirs...")
 	for ; len(p) > 0; p = p[1:] {
-		DbgSchema("/%s", p[0])
+		if IsDebugSchemaEnabled() {
+			DbgSchema("/%s", p[0])	
+		}
 		var ok bool
 		s, ok = s.Dir[p[0]]
 		if !ok {
@@ -261,10 +273,13 @@
 		return nil, nil
 	}
 	entries := FindFirstNonChoiceOrCase(schema)
-
-	DbgSchema("checking for %s against non choice/case entries: %v\n", p[0], stringMapKeys(entries))
+	if IsDebugSchemaEnabled() {
+		DbgSchema("checking for %s against non choice/case entries: %v\n", p[0], stringMapKeys(entries))	
+	}
 	for pe, entry := range entries {
-		DbgSchema("%s ? ", pe)
+		if IsDebugSchemaEnabled() {
+			DbgSchema("%s ? ", pe)	
+		}
 		if pe == p[0] {
 			DbgSchema(" - match\n")
 			return entry, nil
diff -ruN ygot-dir-orig/ygot/ytypes/container.go ygot-dir/ygot/ytypes/container.go
--- ygot-dir-orig/ygot/ytypes/container.go	2019-10-24 12:30:07.700737000 -0700
+++ ygot-dir/ygot/ytypes/container.go	2019-10-24 12:31:26.682226000 -0700
@@ -12,12 +12,15 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
+// This file is changed by Broadcom.
+// Modifications - Copyright 2019 Broadcom. The term Broadcom refers to Broadcom Inc. and/or its subsidiaries.
+
 package ytypes
 
 import (
 	"fmt"
 	"reflect"
-
+	
 	"github.com/kylelemons/godebug/pretty"
 	"github.com/openconfig/goyang/pkg/yang"
 	"github.com/openconfig/ygot/util"
@@ -71,7 +74,7 @@
 				if errs := Validate(cschema, fieldValue); errs != nil {
 					errors = util.AppendErrs(errors, util.PrefixErrors(errs, cschema.Path()))
 				}
-			case !util.IsValueNilOrDefault(structElems.Field(i).Interface()):
+			case !structElems.Field(i).IsNil():
 				// Either an element in choice schema subtree, or bad field.
 				// If the former, it will be found in the choice check below.
 				extraFields[fieldName] = nil
@@ -217,7 +220,10 @@
 		}
 	}
 
-	util.DbgPrint("container after unmarshal:\n%s\n", pretty.Sprint(destv.Interface()))
+	if util.IsDebugLibraryEnabled() {
+		util.DbgPrint("container after unmarshal:\n%s\n", pretty.Sprint(destv.Interface()))
+	} 
+	
 	return nil
 }
 
diff -ruN ygot-dir-orig/ygot/ytypes/leaf.go ygot-dir/ygot/ytypes/leaf.go
--- ygot-dir-orig/ygot/ytypes/leaf.go	2019-10-24 12:30:07.705496000 -0700
+++ ygot-dir/ygot/ytypes/leaf.go	2019-10-24 12:31:26.691433000 -0700
@@ -12,6 +12,9 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
+// This file is changed by Broadcom.
+// Modifications - Copyright 2019 Broadcom. The term Broadcom refers to Broadcom Inc. and/or its subsidiaries.
+
 package ytypes
 
 import (
@@ -79,7 +82,7 @@
 
 	switch ykind {
 	case yang.Ybinary:
-		return util.NewErrs(validateBinary(schema, value))
+		return util.NewErrs(validateBinary(schema, rv))
 	case yang.Ybits:
 		return nil
 		// TODO(mostrowski): restore when representation is decided.
@@ -252,7 +255,7 @@
 // during validation against each matching schema otherwise.
 func validateMatchingSchemas(schema *yang.Entry, value interface{}) util.Errors {
 	var errors []error
-	ss := findMatchingSchemasInUnion(schema.Type, value)
+	ss := findMatchingSchemasInUnion(schema, schema.Type, value)
 	var kk []yang.TypeKind
 	for _, s := range ss {
 		kk = append(kk, s.Type.Kind)
@@ -283,17 +286,25 @@
 // findMatchingSchemasInUnion returns all schemas in the given union type,
 // including those within nested unions, that match the Go type of value.
 // value must not be nil.
-func findMatchingSchemasInUnion(ytype *yang.YangType, value interface{}) []*yang.Entry {
+func findMatchingSchemasInUnion(schema *yang.Entry, ytype *yang.YangType, value interface{}) []*yang.Entry {
 	var matches []*yang.Entry
 
 	util.DbgPrint("findMatchingSchemasInUnion for type %T, kind %s", value, reflect.TypeOf(value).Kind())
 	for _, t := range ytype.Type {
 		if t.Kind == yang.Yunion {
 			// Recursively check all union types within this union.
-			matches = append(matches, findMatchingSchemasInUnion(t, value)...)
+			matches = append(matches, findMatchingSchemasInUnion(schema, t, value)...)
 			continue
 		}
 
+		if t.Kind == yang.Yleafref {
+			ns, err := findLeafRefSchema(schema, t.Path)
+			if err != nil {
+				log.Warningf("not found base Go type for type %v in union value %s", t.Kind, util.ValueStr(value))
+				continue
+			}
+			t = ns.Type
+		}
 		ybt := yangBuiltinTypeToGoType(t.Kind)
 		if reflect.ValueOf(value).Kind() == reflect.Ptr {
 			ybt = ygot.ToPtr(yangBuiltinTypeToGoType(t.Kind))
@@ -418,12 +429,10 @@
 	return nil
 }
 
-// YANGEmpty is a derived type which is used to represent the YANG empty type.
+// YANGEmpty is a derived type which is used to represent the YANG
+// empty type.
 type YANGEmpty bool
 
-// Binary is a derived type which is used to represent the YANG binary type.
-type Binary []byte
-
 // unmarshalLeaf unmarshals a scalar value (determined by json.Unmarshal) into
 // the parent containing the leaf.
 //   schema points to the schema for the leaf type.
@@ -720,7 +729,9 @@
 		return nil, fmt.Errorf("%s Î›EnumTypes function returned wrong type %T, want map[string][]reflect.Type", t, ei)
 	}
 
-	util.DbgPrint("path is %s for schema %s", absoluteSchemaDataPath(schema), schema.Name)
+	if util.IsDebugLibraryEnabled() {
+		util.DbgPrint("path is %s for schema %s", absoluteSchemaDataPath(schema), schema.Name)	
+	}
 
 	return enumTypesMap[absoluteSchemaDataPath(schema)], nil
 }
diff -ruN ygot-dir-orig/ygot/ytypes/list.go ygot-dir/ygot/ytypes/list.go
--- ygot-dir-orig/ygot/ytypes/list.go	2019-10-24 12:30:07.712731000 -0700
+++ ygot-dir/ygot/ytypes/list.go	2019-10-24 12:31:26.696852000 -0700
@@ -12,6 +12,9 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
+// This file is changed by Broadcom.
+// Modifications - Copyright 2019 Broadcom. The term Broadcom refers to Broadcom Inc. and/or its subsidiaries.
+
 package ytypes
 
 import (
@@ -217,6 +220,9 @@
 		if len(schema.Key) == 0 {
 			return fmt.Errorf("list %s with config set must have a key", schema.Name)
 		}
+		if schema.IsSchemaValidated == true {
+			return nil
+		}
 		keys := strings.Split(schema.Key, " ")
 		keysMissing := make(map[string]bool)
 		for _, v := range keys {
@@ -232,6 +238,7 @@
 		}
 	}
 
+	schema.IsSchemaValidated = true
 	return nil
 }
 
@@ -282,10 +289,10 @@
 	if util.IsValueNil(jsonList) {
 		return nil
 	}
-	// Check that the schema itself is valid.
+
 	if err := validateListSchema(schema); err != nil {
 		return err
-	}
+	}	
 
 	util.DbgPrint("unmarshalList jsonList %v, type %T, into parent type %T, schema name %s", util.ValueStrDebug(jsonList), jsonList, parent, schema.Name)
 
@@ -350,7 +357,9 @@
 			return err
 		}
 	}
-	util.DbgPrint("list after unmarshal:\n%s\n", pretty.Sprint(parent))
+	if util.IsDebugLibraryEnabled() {
+		util.DbgPrint("list after unmarshal:\n%s\n", pretty.Sprint(parent))	
+	}
 
 	return nil
 }
@@ -388,17 +397,96 @@
 		if err != nil {
 			return err
 		}
-
 		fv := val.Elem().FieldByName(fn)
 		ft := fv.Type()
 		if util.IsValuePtr(fv) {
 			ft = ft.Elem()
 		}
-
-		nv, err := StringToType(ft, fieldVal)
+		sf, ok := val.Elem().Type().FieldByName(fn)
+		if ok == false {
+			return fmt.Errorf("Field %s not present in the struct %s", fn, val.Elem())
+		}
+		cschema, err := childSchema(schema, sf)
 		if err != nil {
 			return err
 		}
+		keyLeafKind := cschema.Type.Kind
+		if keyLeafKind == yang.Yleafref {
+			lrfschema, err := resolveLeafRef(cschema)
+			if err != nil {
+				return err
+			}
+			keyLeafKind = lrfschema.Type.Kind
+		}
+
+		var nv reflect.Value
+		if keyLeafKind == yang.Yunion && strings.HasSuffix(keyT.Name(), "_Union") {
+			sks, err := getUnionKindsNotEnums(cschema)
+			if err != nil {
+				return err
+			}
+			for _, sk := range sks {
+				gv, err := StringToType(reflect.TypeOf(yangBuiltinTypeToGoType(sk)), fieldVal)
+				if err == nil {
+					mn := "To_" + ft.Name()
+					mapMethod := val.MethodByName(mn)
+					if !mapMethod.IsValid() {
+						return fmt.Errorf("%s does not have a %s function", val, mn)
+					}
+					ec := mapMethod.Call([]reflect.Value{gv})
+					if len(ec) != 2 {
+						return fmt.Errorf("%s %s function returns %d params", ft.Name(), mn, len(ec))
+					}
+					ei := ec[0].Interface()
+					ee := ec[1].Interface()
+					if ee != nil {
+						return fmt.Errorf("unmarshaled %v type %T does not have a union type: %v", fieldVal, fieldVal, ee)
+					}
+					nv = reflect.ValueOf(ei)
+					break
+				}
+			}
+			
+			if nv.IsValid() == false {
+				ets, err := schemaToEnumTypes(cschema, elmT)
+				if err != nil {
+					return err
+				}
+				for _, et := range ets {
+					ev, err := castToEnumValue(et, fieldVal)
+					if err != nil {
+						return err
+					}
+					if ev != nil {
+						mn := "To_" + ft.Name()
+						mapMethod := val.MethodByName(mn)
+						if !mapMethod.IsValid() {
+							return fmt.Errorf("%s does not have a %s function", val, mn)
+						}
+						ec := mapMethod.Call([]reflect.Value{reflect.ValueOf(ev)})
+						if len(ec) != 2 {
+							return fmt.Errorf("%s %s function returns %d params", ft.Name(), mn, len(ec))
+						}
+						ei := ec[0].Interface()
+						ee := ec[1].Interface()
+						if ee != nil {
+							return fmt.Errorf("unmarshaled %v type %T does not have a union type: %v", fieldVal, fieldVal, ee)
+						}
+						nv = reflect.ValueOf(ei)
+						break
+					}
+					fmt.Errorf("could not unmarshal %v into enum type: %s\n", fieldVal, err)
+				}
+				if nv.IsValid() == false {
+					return fmt.Errorf("could not create the value type for the field name %s  with the value %s", fn, fieldVal)
+				}
+			}
+		} else {
+			nv, err = StringToType(ft, fieldVal)
+			if err != nil {
+				return err
+			}
+		}
 		return util.InsertIntoStruct(val.Interface(), fn, nv.Interface())
 	}
 
@@ -494,6 +582,9 @@
 	}
 
 	// TODO(yusufsn): When the key is a leafref, its target should be filled out.
+    if (len(keys) == 0) { 
+         return nil, nil
+    } 
 	mapVal, err := makeValForInsert(schema, root, keys)
 	if err != nil {
 		return nil, fmt.Errorf("failed to create map value for insert, root %T, keys %v: %v", root, keys, err)
diff -ruN ygot-dir-orig/ygot/ytypes/node.go ygot-dir/ygot/ytypes/node.go
--- ygot-dir-orig/ygot/ytypes/node.go	2019-10-24 12:30:07.727365000 -0700
+++ ygot-dir/ygot/ytypes/node.go	2019-10-24 12:31:26.701328000 -0700
@@ -12,17 +12,19 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
+// This file is changed by Broadcom.
+// Modifications - Copyright 2019 Broadcom. The term Broadcom refers to Broadcom Inc. and/or its subsidiaries.
+
 package ytypes
 
 import (
-	"reflect"
-
 	"github.com/golang/protobuf/proto"
 	"github.com/openconfig/goyang/pkg/yang"
 	"github.com/openconfig/ygot/util"
 	"github.com/openconfig/ygot/ygot"
 	"google.golang.org/grpc/codes"
 	"google.golang.org/grpc/status"
+	"reflect"
 
 	gpb "github.com/openconfig/gnmi/proto/gnmi"
 )
@@ -129,6 +131,16 @@
 				if err := util.InitializeStructField(root, ft.Name); err != nil {
 					return nil, status.Errorf(codes.Unknown, "failed to initialize struct field %s in %T, child schema %v, path %v", ft.Name, root, cschema, path)
 				}
+
+				if cschema.IsLeaf() || cschema.IsLeafList() {
+					if len(path.Elem) == 1 && len(path.Elem[0].Key) == 1 {
+						var vals []string
+						vals = append(vals, path.Elem[0].Key[path.Elem[0].Name])
+						if args.val, err = ygot.EncodeTypedValue(vals, gpb.Encoding_JSON_IETF); err != nil {
+							return nil, status.Errorf(codes.Unknown, "failed to get the typed value '%v' for leaf/leaf-list => %s in %T ; because of %v", vals, ft.Name, root, err)
+						}
+					}
+				}
 			}
 
 			// If val in args is set to a non-nil value and the path is exhausted, we
@@ -286,6 +298,11 @@
 		if err != nil {
 			return nil, err
 		}
+
+		if (key == nil) {
+			return []*TreeNode{{Path: traversedPath,Schema: schema,Data: root,}}, nil
+		}
+
 		nodes, err := retrieveNode(schema, rv.MapIndex(reflect.ValueOf(key)).Interface(), util.PopGNMIPath(path), appendElem(traversedPath, path.GetElem()[0]), args)
 		if err != nil {
 			return nil, err
diff -ruN ygot-dir-orig/ygot/ytypes/string_type.go ygot-dir/ygot/ytypes/string_type.go
--- ygot-dir-orig/ygot/ytypes/string_type.go	2019-10-24 12:30:07.734288000 -0700
+++ ygot-dir/ygot/ytypes/string_type.go	2019-10-24 12:31:26.705649000 -0700
@@ -12,6 +12,9 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
+// This file is changed by Broadcom.
+// Modifications - Copyright 2019 Broadcom. The term Broadcom refers to Broadcom Inc. and/or its subsidiaries.
+
 package ytypes
 
 import (
@@ -23,6 +26,8 @@
 	"github.com/openconfig/goyang/pkg/yang"
 )
 
+var regexpCache map[string]*regexp.Regexp = make(map[string]*regexp.Regexp)
+
 // Refer to: https://tools.ietf.org/html/rfc6020#section-9.4.
 
 // validateString validates value, which must be a Go string type, against the
@@ -48,10 +53,18 @@
 
 	// Check that the value satisfies any regex patterns.
 	for _, p := range schema.Type.Pattern {
-		r, err := regexp.Compile(fixYangRegexp(p))
-		if err != nil {
-			return err
+		var r *regexp.Regexp
+		if val, ok := regexpCache[p]; ok {
+			r = val
+		} else {
+			var err error
+			r, err = regexp.Compile(fixYangRegexp(p))
+			if err != nil {
+				return err
+			}
+			regexpCache[p] = r	
 		}
+		
 		// fixYangRegexp adds ^(...)$ around the pattern - the result is
 		// equivalent to a full match of whole string.
 		if !r.MatchString(stringVal) {
@@ -105,13 +118,29 @@
 		return fmt.Errorf("string schema %s has wrong type %v", schema.Name, schema.Type.Kind)
 	}
 
+	if schema.IsSchemaValidated {
+		return nil
+	}
+	
+	var err error
+	
 	for _, p := range schema.Type.Pattern {
-		if _, err := regexp.Compile(fixYangRegexp(p)); err != nil {
-			return fmt.Errorf("error generating regexp %s %v for schema %s", p, err, schema.Name)
-		}
+		_, ok := regexpCache[p]
+		if (ok == false) {
+			var r *regexp.Regexp
+			if r, err = regexp.Compile(fixYangRegexp(p)); err != nil {
+				return fmt.Errorf("error generating regexp %s %v for schema %s", p, err, schema.Name)
+			} else {
+				regexpCache[p] = r
+			}
+		}		
 	}
 
-	return validateLengthSchema(schema)
+	if err = validateLengthSchema(schema); err == nil {
+		schema.IsSchemaValidated = true
+	}
+	
+	return err 
 }
 
 // fixYangRegexp takes a pattern regular expression from a YANG module and
diff -ruN ygot-dir-orig/ygot/ytypes/unmarshal.go ygot-dir/ygot/ytypes/unmarshal.go
--- ygot-dir-orig/ygot/ytypes/unmarshal.go	2019-10-24 12:30:07.753024000 -0700
+++ ygot-dir/ygot/ytypes/unmarshal.go	2019-10-24 12:31:26.710027000 -0700
@@ -12,6 +12,9 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
+// This file is changed by Broadcom.
+// Modifications - Copyright 2019 Broadcom. The term Broadcom refers to Broadcom Inc. and/or its subsidiaries.
+
 package ytypes
 
 import (
@@ -73,7 +76,10 @@
 	if schema == nil {
 		return fmt.Errorf("nil schema for parent type %T, value %v (%T)", parent, value, value)
 	}
-	util.DbgPrint("Unmarshal value %v, type %T, into parent type %T, schema name %s", util.ValueStrDebug(value), value, parent, schema.Name)
+	
+	if (util.IsDebugLibraryEnabled()) {
+		util.DbgPrint("Unmarshal value %v, type %T, into parent type %T, schema name %s", util.ValueStrDebug(value), value, parent, schema.Name)	
+	}
 
 	if enc == GNMIEncoding && !(schema.IsLeaf() || schema.IsLeafList()) {
 		return errors.New("unmarshalling a non leaf node isn't supported in GNMIEncoding mode")
diff -ruN ygot-dir-orig/ygot/ytypes/util_schema.go ygot-dir/ygot/ytypes/util_schema.go
--- ygot-dir-orig/ygot/ytypes/util_schema.go	2019-10-24 12:30:07.763728000 -0700
+++ ygot-dir/ygot/ytypes/util_schema.go	2019-10-24 12:31:26.715104000 -0700
@@ -12,6 +12,9 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
+// This file is changed by Broadcom.
+// Modifications - Copyright 2019 Broadcom. The term Broadcom refers to Broadcom Inc. and/or its subsidiaries.
+
 package ytypes
 
 import (
@@ -23,6 +26,8 @@
 	"github.com/openconfig/ygot/util"
 )
 
+var pathToSchemaCache map[reflect.StructTag][]string = make(map[reflect.StructTag][]string)
+
 // validateLengthSchema validates whether the given schema has a valid length
 // specification.
 func validateLengthSchema(schema *yang.Entry) error {
@@ -137,8 +142,16 @@
 // if the struct tag is invalid, or nil if tag is valid but the schema is not
 // found in the tree at the specified path.
 func childSchema(schema *yang.Entry, f reflect.StructField) (*yang.Entry, error) {
-	pathTag, _ := f.Tag.Lookup("path")
-	util.DbgSchema("childSchema for schema %s, field %s, tag %s\n", schema.Name, f.Name, pathTag)
+	if (schema.ChildSchemaCache == nil) {
+		schema.ChildSchemaCache = make(map[reflect.StructTag]*yang.Entry)
+	} else if cschema, ok := schema.ChildSchemaCache[f.Tag]; ok {
+		return cschema, nil
+	}
+	
+	if util.IsDebugSchemaEnabled() {
+		pathTag, _ := f.Tag.Lookup("path")
+		util.DbgSchema("childSchema for schema %s, field %s, tag %s\n", schema.Name, f.Name, pathTag)	
+	}
 	p, err := pathToSchema(f)
 	if err != nil {
 		return nil, err
@@ -168,6 +181,7 @@
 	}
 	if foundSchema {
 		util.DbgSchema(" - found\n")
+		schema.ChildSchemaCache[f.Tag] = childSchema
 		return childSchema, nil
 	}
 	util.DbgSchema(" - not found\n")
@@ -183,21 +197,25 @@
 		// path element i.e. choice1/case1/leaf1 path in the schema will have
 		// struct tag `path:"leaf1"`. This implies that only paths with length
 		// 1 are eligible for this matching.
+		schema.ChildSchemaCache[f.Tag] = nil
 		return nil, nil
 	}
 	entries := util.FindFirstNonChoiceOrCase(schema)
-
-	util.DbgSchema("checking for %s against non choice/case entries: %v\n", p[0], stringMapKeys(entries))
+	if util.IsDebugSchemaEnabled() {
+		util.DbgSchema("checking for %s against non choice/case entries: %v\n", p[0], stringMapKeys(entries))
+	}
 	for name, entry := range entries {
 		util.DbgSchema("%s ? ", name)
 
 		if util.StripModulePrefix(name) == p[0] {
 			util.DbgSchema(" - match\n")
+			schema.ChildSchemaCache[f.Tag] = entry
 			return entry, nil
 		}
 	}
 
 	util.DbgSchema(" - no matches\n")
+	schema.ChildSchemaCache[f.Tag] = nil
 	return nil, nil
 }
 
@@ -239,25 +257,32 @@
 // leafref. In the latter case, this function returns {"config", "a"}, and the
 // schema *yang.Entry for the field is given by schema.Dir["config"].Dir["a"].
 func pathToSchema(f reflect.StructField) ([]string, error) {
-	pathAnnotation, ok := f.Tag.Lookup("path")
-	if !ok {
-		return nil, fmt.Errorf("field %s did not specify a path", f.Name)
-	}
-
-	paths := strings.Split(pathAnnotation, "|")
-	if len(paths) == 1 {
-		pathAnnotation = strings.TrimPrefix(pathAnnotation, "/")
-		return strings.Split(pathAnnotation, "/"), nil
-	}
-	for _, pv := range paths {
-		pv = strings.TrimPrefix(pv, "/")
-		pe := strings.Split(pv, "/")
-		if len(pe) > 1 {
+	if pe, ok := pathToSchemaCache[f.Tag]; ok {
+		return pe, nil
+	} else {
+		pathAnnotation, ok := f.Tag.Lookup("path")
+		if !ok {
+			return nil, fmt.Errorf("field %s did not specify a path", f.Name)
+		}
+	
+		paths := strings.Split(pathAnnotation, "|")
+		if len(paths) == 1 {
+			pathAnnotation = strings.TrimPrefix(pathAnnotation, "/")
+			pe := strings.Split(pathAnnotation, "/")
+			pathToSchemaCache[f.Tag] = pe
 			return pe, nil
 		}
+		for _, pv := range paths {
+			pv = strings.TrimPrefix(pv, "/")
+			pe := strings.Split(pv, "/")
+			if len(pe) > 1 {
+				pathToSchemaCache[f.Tag] = pe
+				return pe, nil
+			}
+		}
+	
+		return nil, fmt.Errorf("field %s had path tag %s with |, but no elements of form a/b", f.Name, pathAnnotation)
 	}
-
-	return nil, fmt.Errorf("field %s had path tag %s with |, but no elements of form a/b", f.Name, pathAnnotation)
 }
 
 // directDescendantSchema returns the direct descendant schema for the struct
diff -ruN ygot-dir-orig/ygot/ytypes/validate.go ygot-dir/ygot/ytypes/validate.go
--- ygot-dir-orig/ygot/ytypes/validate.go	2019-10-24 12:30:07.778829000 -0700
+++ ygot-dir/ygot/ytypes/validate.go	2019-10-24 12:31:26.719650000 -0700
@@ -12,6 +12,9 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
+// This file is changed by Broadcom.
+// Modifications - Copyright 2019 Broadcom. The term Broadcom refers to Broadcom Inc. and/or its subsidiaries.
+
 package ytypes
 
 import (
@@ -74,7 +77,7 @@
 		errs = ValidateLeafRefData(schema, value, leafrefOpt)
 	}
 
-	util.DbgPrint("Validate with value %v, type %T, schema name %s", util.ValueStr(value), value, schema.Name)
+	util.DbgPrint("Validate with value %v, type %T, schema name %s", util.ValueStrDebug(value), value, schema.Name)
 
 	switch {
 	case schema.IsLeaf():
