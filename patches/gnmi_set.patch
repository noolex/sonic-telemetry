--- ./build/src/github.com/jipanyang/gnxi/gnmi_set/gnmi_set.go	2019-12-11 11:05:56.389533034 -0800
+++ ./build/src/github.com/jipanyang/gnxi/gnmi_set/gnmi_set.go	2019-12-10 09:38:41.352568886 -0800
@@ -31,7 +31,8 @@
 
 	"github.com/google/gnxi/utils"
 	"github.com/google/gnxi/utils/credentials"
-	"github.com/google/gnxi/utils/xpath"
+	//"github.com/google/gnxi/utils/xpath"
+	"github.com/jipanyang/gnxi/utils/xpath"
 
 	pb "github.com/openconfig/gnmi/proto/gnmi"
 )
@@ -54,16 +55,36 @@
 	targetAddr = flag.String("target_addr", "localhost:10161", "The target address in the format of host:port")
 	targetName = flag.String("target_name", "hostname.com", "The target name use to verify the hostname returned by TLS handshake")
 	timeOut    = flag.Duration("time_out", 10*time.Second, "Timeout for the Get request, 10 seconds by default")
+	pathTarget = flag.String("xpath_target", "", "name of the target for which the path is a member")
 )
 
 func buildPbUpdateList(pathValuePairs []string) []*pb.Update {
 	var pbUpdateList []*pb.Update
 	for _, item := range pathValuePairs {
-		pathValuePair := strings.SplitN(item, ":", 2)
-		// TODO (leguo): check if any path attribute contains ':'
+		modName := strings.SplitN(item, "/", 3)
+		
+		pathValuePair := make([]string, 2)
+		lc := strings.LastIndex(modName[2],":")
+		
+		if lc == -1 {
+			log.Exitf("invalid path-value pair: %v", item)
+		}
+		pathValuePair_r := strings.SplitN(modName[2], ":", 2)
+		// pathValuePair[0] = modName[2][0:lc]
+
+		pathValuePair[0] = "/" + modName[1] + "/" + pathValuePair_r[0]
+
+		pathValuePair[1] = modName[2][lc+1:]
+		fmt.Println(pathValuePair[0])
+		fmt.Println(pathValuePair[1])
+
+
 		if len(pathValuePair) != 2 || len(pathValuePair[1]) == 0 {
 			log.Exitf("invalid path-value pair: %v", item)
+			log.Exitf("invalid path-value pair: %v", modName)
 		}
+
+
 		pbPath, err := xpath.ToGNMIPath(pathValuePair[0])
 		if err != nil {
 			log.Exitf("error in parsing xpath %q to gnmi path", pathValuePair[0])
@@ -144,8 +165,10 @@
 	}
 	replaceList := buildPbUpdateList(replaceOpt)
 	updateList := buildPbUpdateList(updateOpt)
-
+	var prefix pb.Path
+	prefix.Target = *pathTarget
 	setRequest := &pb.SetRequest{
+		Prefix:    &prefix,
 		Delete:  deleteList,
 		Replace: replaceList,
 		Update:  updateList,
